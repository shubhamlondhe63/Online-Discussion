{"ast":null,"code":"import { GET_POST, GET_POSTS, POST_ERROR, UPDATE_LIKES, ADD_POST, DELETE_POST, ADD_COMMENT, REMOVE_COMMENT } from \"../actions/types\";\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\n\nfunction postReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload.id ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default postReducer;","map":{"version":3,"sources":["/home/epps/Backup/React/Online-Discussion/client/src/reducers/post.js"],"names":["GET_POST","GET_POSTS","POST_ERROR","UPDATE_LIKES","ADD_POST","DELETE_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","postReducer","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"mappings":"AAAA,SACCA,QADD,EAECC,SAFD,EAGCC,UAHD,EAICC,YAJD,EAKCC,QALD,EAMCC,WAND,EAOCC,WAPD,EAQCC,cARD,QASO,kBATP;AAWA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,KAAK,EAAE,EADa;AAEpBC,EAAAA,IAAI,EAAE,IAFc;AAGpBC,EAAAA,OAAO,EAAE,IAHW;AAIpBC,EAAAA,KAAK,EAAE;AAJa,CAArB;;AAOA,SAASC,WAAT,GAAmD;AAAA,MAA9BC,KAA8B,uEAAtBN,YAAsB;AAAA,MAARO,MAAQ;AAClD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACC,SAAKf,SAAL;AACC,aAAO,EACN,GAAGa,KADG;AAENL,QAAAA,KAAK,EAAEQ,OAFD;AAGNN,QAAAA,OAAO,EAAE;AAHH,OAAP;;AAKD,SAAKX,QAAL;AACC,aAAO,EACN,GAAGc,KADG;AAENJ,QAAAA,IAAI,EAAEO,OAFA;AAGNN,QAAAA,OAAO,EAAE;AAHH,OAAP;;AAKD,SAAKP,QAAL;AACC,aAAO,EACN,GAAGU,KADG;AAENL,QAAAA,KAAK,EAAE,CAACQ,OAAD,EAAU,GAAGH,KAAK,CAACL,KAAnB,CAFD;AAGNE,QAAAA,OAAO,EAAE;AAHH,OAAP;;AAKD,SAAKN,WAAL;AACC,aAAO,EACN,GAAGS,KADG;AAENL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYS,MAAZ,CAAoBR,IAAD,IAAUA,IAAI,CAACS,GAAL,KAAaF,OAA1C,CAFD;AAGNN,QAAAA,OAAO,EAAE;AAHH,OAAP;;AAKD,SAAKT,UAAL;AACC,aAAO,EACN,GAAGY,KADG;AAENF,QAAAA,KAAK,EAAEK,OAFD;AAGNN,QAAAA,OAAO,EAAE;AAHH,OAAP;;AAKD,SAAKR,YAAL;AACC,aAAO,EACN,GAAGW,KADG;AAENL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYW,GAAZ,CAAiBV,IAAD,IACtBA,IAAI,CAACS,GAAL,KAAaF,OAAO,CAACI,EAArB,GACG,EAAE,GAAGX,IAAL;AAAWY,UAAAA,KAAK,EAAEL,OAAO,CAACK;AAA1B,SADH,GAEGZ,IAHG,CAFD;AAONC,QAAAA,OAAO,EAAE;AAPH,OAAP;;AASD,SAAKL,WAAL;AACC,aAAO,EACN,GAAGQ,KADG;AAENJ,QAAAA,IAAI,EAAE,EAAE,GAAGI,KAAK,CAACJ,IAAX;AAAiBa,UAAAA,QAAQ,EAAEN;AAA3B,SAFA;AAGNN,QAAAA,OAAO,EAAE;AAHH,OAAP;;AAKD,SAAKJ,cAAL;AACC,aAAO,EACN,GAAGO,KADG;AAENJ,QAAAA,IAAI,EAAE,EACL,GAAGI,KAAK,CAACJ,IADJ;AAELa,UAAAA,QAAQ,EAAET,KAAK,CAACJ,IAAN,CAAWa,QAAX,CAAoBL,MAApB,CACRM,OAAD,IAAaA,OAAO,CAACL,GAAR,KAAgBF,OADpB;AAFL,SAFA;AAQNN,QAAAA,OAAO,EAAE;AARH,OAAP;;AAUD;AACC,aAAOG,KAAP;AA3DF;AA6DA;;AAED,eAAeD,WAAf","sourcesContent":["import {\n\tGET_POST,\n\tGET_POSTS,\n\tPOST_ERROR,\n\tUPDATE_LIKES,\n\tADD_POST,\n\tDELETE_POST,\n\tADD_COMMENT,\n\tREMOVE_COMMENT,\n} from \"../actions/types\";\n\nconst initialState = {\n\tposts: [],\n\tpost: null,\n\tloading: true,\n\terror: {},\n};\n\nfunction postReducer(state = initialState, action) {\n\tconst { type, payload } = action;\n\n\tswitch (type) {\n\t\tcase GET_POSTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: payload,\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase GET_POST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpost: payload,\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase ADD_POST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: [payload, ...state.posts],\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase DELETE_POST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: state.posts.filter((post) => post._id !== payload),\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase POST_ERROR:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terror: payload,\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase UPDATE_LIKES:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposts: state.posts.map((post) =>\n\t\t\t\t\tpost._id === payload.id\n\t\t\t\t\t\t? { ...post, likes: payload.likes }\n\t\t\t\t\t\t: post\n\t\t\t\t),\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase ADD_COMMENT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpost: { ...state.post, comments: payload },\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tcase REMOVE_COMMENT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpost: {\n\t\t\t\t\t...state.post,\n\t\t\t\t\tcomments: state.post.comments.filter(\n\t\t\t\t\t\t(comment) => comment._id !== payload\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tloading: false,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default postReducer;\n"]},"metadata":{},"sourceType":"module"}