{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { ADD_POST, DELETE_POST, GET_POST, GET_POSTS, POST_ERROR, UPDATE_LIKES, ADD_COMMENT, REMOVE_COMMENT } from \"./types\"; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts\");\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add like\n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // TODO: Implement the dislike functionality so we can have dislike even when not liked\n// Remove like\n\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${id}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add post\n\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts\", formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Comment Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete comment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/epps/Backup/React/Online-Discussion/client/src/actions/post.js"],"names":["axios","setAlert","ADD_POST","DELETE_POST","GET_POST","GET_POSTS","POST_ERROR","UPDATE_LIKES","ADD_COMMENT","REMOVE_COMMENT","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","id","put","likes","removeLike","deletePost","delete","addPost","formData","config","headers","post","getPost","addComment","postId","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport {\n\tADD_POST,\n\tDELETE_POST,\n\tGET_POST,\n\tGET_POSTS,\n\tPOST_ERROR,\n\tUPDATE_LIKES,\n\tADD_COMMENT,\n\tREMOVE_COMMENT,\n} from \"./types\";\n\n// Get posts\nexport const getPosts = () => async (dispatch) => {\n\ttry {\n\t\tconst res = await axios.get(\"/api/posts\");\n\n\t\tdispatch({\n\t\t\ttype: GET_POSTS,\n\t\t\tpayload: res.data,\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status,\n\t\t\t},\n\t\t});\n\t}\n};\n\n// Add like\nexport const addLike = (id) => async (dispatch) => {\n\ttry {\n\t\tconst res = await axios.put(`/api/posts/like/${id}`);\n\n\t\tdispatch({\n\t\t\ttype: UPDATE_LIKES,\n\t\t\tpayload: { id, likes: res.data },\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status,\n\t\t\t},\n\t\t});\n\t}\n};\n\n// TODO: Implement the dislike functionality so we can have dislike even when not liked\n// Remove like\nexport const removeLike = (id) => async (dispatch) => {\n\ttry {\n\t\tconst res = await axios.put(`/api/posts/unlike/${id}`);\n\n\t\tdispatch({\n\t\t\ttype: UPDATE_LIKES,\n\t\t\tpayload: { id, likes: res.data },\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status,\n\t\t\t},\n\t\t});\n\t}\n};\n\n// Delete post\nexport const deletePost = (id) => async (dispatch) => {\n\ttry {\n\t\tawait axios.delete(`/api/posts/${id}`);\n\n\t\tdispatch({\n\t\t\ttype: DELETE_POST,\n\t\t\tpayload: id,\n\t\t});\n\n\t\tdispatch(setAlert(\"Post Removed\", \"success\"));\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status,\n\t\t\t},\n\t\t});\n\t}\n};\n\n// Add post\nexport const addPost = (formData) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t};\n\n\ttry {\n\t\tconst res = await axios.post(\"/api/posts\", formData, config);\n\n\t\tdispatch({\n\t\t\ttype: ADD_POST,\n\t\t\tpayload: res.data,\n\t\t});\n\n\t\tdispatch(setAlert(\"Post Created\", \"success\"));\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status,\n\t\t\t},\n\t\t});\n\t}\n};\n\n// Get post\nexport const getPost = (id) => async (dispatch) => {\n\ttry {\n\t\tconst res = await axios.get(`/api/posts/${id}`);\n\n\t\tdispatch({\n\t\t\ttype: GET_POST,\n\t\t\tpayload: res.data,\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status,\n\t\t\t},\n\t\t});\n\t}\n};\n\n// Add comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t};\n\n\ttry {\n\t\tconst res = await axios.post(\n\t\t\t`/api/posts/comment/${postId}`,\n\t\t\tformData,\n\t\t\tconfig\n\t\t);\n\n\t\tdispatch({\n\t\t\ttype: ADD_COMMENT,\n\t\t\tpayload: res.data,\n\t\t});\n\n\t\tdispatch(setAlert(\"Comment Added\", \"success\"));\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status,\n\t\t\t},\n\t\t});\n\t}\n};\n\n// Delete comment\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\n\ttry {\n\t\tawait axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n\t\tdispatch({\n\t\t\ttype: REMOVE_COMMENT,\n\t\t\tpayload: commentId,\n\t\t});\n\n\t\tdispatch(setAlert(\"Comment Removed\", \"success\"));\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: {\n\t\t\t\tmsg: err.response.statusText,\n\t\t\t\tstatus: err.response.status,\n\t\t\t},\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}